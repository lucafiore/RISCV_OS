Probably we have to write the SDRAM memory controller in system-Verilog in order to exploit the SDRAM on our FPGA and to make it to communicate with our RISC-V core. Then, we need to bring our SysVer RISC-V core on the FPGA itself and try to make it to communicate with the memory.
 
==============================================================
1) Search for multiple SysVer architecture implementation of RISC-V and choose the best one.
We have at this link two projects both in SysVer developed by two teams in 2019 ISA lab: http://personal.det.polito.it/maurizio.martina/riscv.html

We need the core implemented at Bologna by Di Carlo’s friend.

==============================================================
2) Write memory controller looking at the datasheet of the SDRAM on the FPGA.

We have two available board and we have to choose the one that has the simplest memory in order to write the simplest memory controller:  
a) DE1SOC di Intel-Altera: https://www.terasic.com.tw/cgi-bin/page/archive.pl?Language=English&No=836
b) Board Xilinx con dispositivo Zynq : da chiedere a Di Carlo

Useful links to write a SDRAM controller:
https://www.intel.cn/content/dam/altera-www/global/zh_CN/pdfs/literature/hb/nios2/n2cpu_nii51005.pdf

https://www.fpga4fun.com/SDRAM.html

==============================================================
3) Learn how to write in System Verilog
http://www.asic-world.com/systemverilog/tutorial.html

==============================================================
4) Read many papers on RISC-V and Real time Operating System

==============================================================
